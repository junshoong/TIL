<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>TIL</title><link href="http://til.junshoong.net/" rel="alternate"></link><link href="http://til.junshoong.net/feeds/all.atom.xml" rel="self"></link><id>http://til.junshoong.net/</id><updated>2017-04-16T00:00:00+09:00</updated><entry><title>[Django] restframework에서 image 제공하기</title><link href="http://til.junshoong.net/django/django-restframework-image-field" rel="alternate"></link><published>2017-04-16T00:00:00+09:00</published><updated>2017-04-16T00:00:00+09:00</updated><author><name>junshoong</name></author><id>tag:til.junshoong.net,2017-04-16:/django/django-restframework-image-field</id><summary type="html">&lt;p&gt;DRF에서 image field를 serving 해보자.&lt;/p&gt;</summary><content type="html">&lt;p&gt;drf에서 이미지를 제공하기 위해서는 이미지 Renderer가 별도로 필요하다. 이는 JSONRenderer 등과는 다르게 직접 만들어줘야 한다. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;/myapp/views.py&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;viewsets&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;renderers&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework.decorators&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;detail_route&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework.response&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;JPEGRenderer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;renderers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BaseRenderer&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;media_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;image/jpeg&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;format&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;jpg&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;charset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
    &lt;span class="n"&gt;render_style&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;binary&amp;#39;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;media_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;renderer_context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestViewSet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;viewsets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModelViewSet&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="nd"&gt;@detail_route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;renderer_classes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;JPEGRenderer&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;obj_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_object&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj_name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;이렇게 제공하면 url끝에 ~/image/ 경로로 이미지에 접근할 수 있다.
그런데 url의 정보는 그대로인것 같은데 이건 serialize에서 수정해주면 될 것같다.&lt;/p&gt;</content><category term="django"></category><category term="rest"></category></entry><entry><title>[CSS] rem과 em</title><link href="http://til.junshoong.net/css/rem-vs-em" rel="alternate"></link><published>2017-04-13T00:00:00+09:00</published><updated>2017-04-13T00:00:00+09:00</updated><author><name>junshoong</name></author><id>tag:til.junshoong.net,2017-04-13:/css/rem-vs-em</id><summary type="html">&lt;p&gt;rem은 root에, em은 해당 요소의 font-size에 비례한다. 그리고 rem이 권장되는 편이다.&lt;/p&gt;</summary><content type="html">&lt;p&gt;css로 디자인을 할때 &lt;code&gt;margin&lt;/code&gt;이나 &lt;code&gt;padding&lt;/code&gt;등의 값을 주곤한다. 이럴때 사용하는 단위가 &lt;code&gt;px&lt;/code&gt;, &lt;code&gt;em&lt;/code&gt;, &lt;code&gt;rem&lt;/code&gt;등이 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;px&lt;/code&gt;은 픽셀을 의미한다. 고정된 크기를 제공한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;em&lt;/code&gt;은 해당 요소의 font-size에 비례하는 값이다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rem&lt;/code&gt;은 html요소(root)의 root font-size에 비례한다. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;그러니까.. &lt;code&gt;rem&lt;/code&gt;이 html의 전반에 걸쳐서 사용하는 font-size에 영향을 받기 때문에 이를 사용해서 디자인을 하는게 좋다.  &lt;code&gt;em&lt;/code&gt;을 사용해도 되긴하지만 해당 요소에 특별하게 영향을 줄때만 사용하고 왠만하면 &lt;code&gt;rem&lt;/code&gt;이 권장된다.&lt;/p&gt;
&lt;p&gt;더 자세한 내용은 &lt;a href="https://webdesign.tutsplus.com/ko/tutorials/comprehensive-guide-when-to-use-em-vs-rem--cms-23984"&gt;tutsplus의 'Rem 그리고 Em, 언제 써야 할까'&lt;/a&gt;를 참고한다.&lt;/p&gt;</content><category term="css"></category><category term="front"></category></entry><entry><title>[Git] Submodule 사용하기</title><link href="http://til.junshoong.net/git/use-submodule" rel="alternate"></link><published>2017-04-13T00:00:00+09:00</published><updated>2017-04-13T00:00:00+09:00</updated><author><name>junshoong</name></author><id>tag:til.junshoong.net,2017-04-13:/git/use-submodule</id><summary type="html">&lt;p&gt;git에서 Submodule을 사용해봤다.&lt;/p&gt;</summary><content type="html">&lt;p&gt;단순하게 git repo안에서 &lt;code&gt;git clone&lt;/code&gt;을 하는 경우 연동이 잘 되지 않는것 같다. &lt;code&gt;git checkout&lt;/code&gt;등을 하면서 git repo안에 clone 했던 git repo가 날아가버리는 상황도 발생했다. 이럴땐 아래와 같이 하자.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git submodule add git@github.com:&amp;lt;user&amp;gt;/&amp;lt;repo&amp;gt;.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;.gitmodules&lt;/code&gt;라는 파일이 생성되고 submodule로 등록되었다. push하면 웹상에서도 연결되어 있음을 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;더 자세한 도움은 아래 링크에서 받을 수 있다.
- &lt;a href="https://git-scm.com/book/ko/v2/Git-%EB%8F%84%EA%B5%AC-%EC%84%9C%EB%B8%8C%EB%AA%A8%EB%93%88"&gt;git-scm docs&lt;/a&gt;
- &lt;a href="http://ohgyun.com/711"&gt;꿀벌개발일지 - 서브모듈 이해하기&lt;/a&gt;&lt;/p&gt;</content><category term="git"></category></entry><entry><title>[Python] lambda를 통한 sort</title><link href="http://til.junshoong.net/python/lambda-sort" rel="alternate"></link><published>2017-04-12T00:00:00+09:00</published><updated>2017-04-12T00:00:00+09:00</updated><author><name>junshoong</name></author><id>tag:til.junshoong.net,2017-04-12:/python/lambda-sort</id><summary type="html">&lt;p&gt;&lt;code&gt;lambda&lt;/code&gt;는 익명 함수이다. python 외에도 여러 언어에서 지원하는 expression으로, 짧은 함수를 잠깐 사용할 때 쓸 수 있다.
가장 기본적으로는 아래와 같이 쓴다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;9&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;225&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;lambda&lt;/code&gt;뒤에 인자를 받고 return 값을 적어준다.
아래와 같이 사용할 수도 있다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;&lt;code&gt;lambda&lt;/code&gt;는 익명 함수이다. python 외에도 여러 언어에서 지원하는 expression으로, 짧은 함수를 잠깐 사용할 때 쓸 수 있다.
가장 기본적으로는 아래와 같이 쓴다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;9&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;225&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;lambda&lt;/code&gt;뒤에 인자를 받고 return 값을 적어준다.
아래와 같이 사용할 수도 있다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;10&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;sort&lt;/code&gt; 함수의 key로도 사용한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;
&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="python"></category></entry><entry><title>[Regex] 특정문자로 시작하지 않는 중국어가 포함된 문자열</title><link href="http://til.junshoong.net/regex/chinese-string-without-special-character-starting" rel="alternate"></link><published>2017-04-09T15:40:00+09:00</published><updated>2017-04-09T15:40:00+09:00</updated><author><name>junshoong</name></author><id>tag:til.junshoong.net,2017-04-09:/regex/chinese-string-without-special-character-starting</id><summary type="html">&lt;p&gt;&lt;a href="https://github.com/skhu-sss/ssslackbot/blob/master/plugins/filter.py"&gt;ssslackbot&lt;/a&gt;을 개발 중에 regex가 필요하게 되었다. 전각 느낌표(&lt;code&gt;！&lt;/code&gt;)로 시작하지 않는 중국어가 포함된 문자열을 확인해서 걸러내야하는 작업이다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;중국어 자판에서는 전각느낌표를 사용한다. &lt;code&gt;！&lt;/code&gt; != &lt;code&gt;!&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;먼저 중국어 문자열의 범위를 살펴보자. 영어에서는 &lt;code&gt;[a-z]&lt;/code&gt;나 &lt;code&gt;[A-Z]&lt;/code&gt;등을 사용해서 간단히 거를 수 있다. 한글도 마찬가지로 &lt;code&gt;[ㄱ-힇]&lt;/code&gt; 정도로 거른다. 하지만 중국어는 유니코드로 걸러내야한다. &lt;code&gt;[\u4e00-\u9fff]&lt;/code&gt;로 표현 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://github.com/skhu-sss/ssslackbot/blob/master/plugins/filter.py"&gt;ssslackbot&lt;/a&gt;을 개발 중에 regex가 필요하게 되었다. 전각 느낌표(&lt;code&gt;！&lt;/code&gt;)로 시작하지 않는 중국어가 포함된 문자열을 확인해서 걸러내야하는 작업이다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;중국어 자판에서는 전각느낌표를 사용한다. &lt;code&gt;！&lt;/code&gt; != &lt;code&gt;!&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;먼저 중국어 문자열의 범위를 살펴보자. 영어에서는 &lt;code&gt;[a-z]&lt;/code&gt;나 &lt;code&gt;[A-Z]&lt;/code&gt;등을 사용해서 간단히 거를 수 있다. 한글도 마찬가지로 &lt;code&gt;[ㄱ-힇]&lt;/code&gt; 정도로 거른다. 하지만 중국어는 유니코드로 걸러내야한다. &lt;code&gt;[\u4e00-\u9fff]&lt;/code&gt;로 표현 된다.&lt;/p&gt;
&lt;p&gt;그럼 이제 전각 느낌표로 시작하지 않는 문자열을 걸러보자. 편의를 위해서 일반적으로 사용하는 반각느낌표(&lt;code&gt;!&lt;/code&gt;)를 사용하겠다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;^(?!!)(.*)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;하나씩 풀어보자.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;^&lt;/code&gt; 는 문자열의 시작부분을 의미한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(?!x)&lt;/code&gt;는 &lt;code&gt;x&lt;/code&gt;로 시작하지 않는 문자를 검색한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.&lt;/code&gt;는 모든 문자를 의미한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*&lt;/code&gt;는 0~n개의 문자를 의미한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;^(?!!)(.*)&lt;/code&gt; 그럼 이것은 &lt;code&gt;!&lt;/code&gt;로 시작하지 않는 모든 문자를 의미한다.&lt;/p&gt;
&lt;p&gt;그럼 두 가지를 합쳐보자.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;^(?!!)(.*[\u4e00-\u9fff]+.*)&lt;/code&gt; !로 시작하지 않는 모든 문자열속의 중국어가 1개 이상포함된 문자열을 의미한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://regex101.com/r/ZMBaBB/1"&gt;regex101&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/a/40122744/4466697"&gt;stackoverflow - chinese character&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/a/1366113/4466697"&gt;stackoverflow - chinese unicode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="regex"></category><category term="python"></category><category term="slackbot"></category></entry><entry><title>[Pelican] 설치</title><link href="http://til.junshoong.net/pelican/pelican-setup" rel="alternate"></link><published>2017-04-09T04:25:00+09:00</published><updated>2017-04-09T04:25:00+09:00</updated><author><name>junshoong</name></author><id>tag:til.junshoong.net,2017-04-09:/pelican/pelican-setup</id><summary type="html">&lt;p&gt;pelican 3.7.1을 설치했다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install pelican markdown
pelican-quickstart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;로 설치를 진행한다.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/getpelican/pelican-themes/tree/master/simple-bootstrap"&gt;simple-bootstrap&lt;/a&gt; 테마를 적용했다.&lt;/p&gt;
&lt;p&gt;원하는 경로에 테마를 받은 후에 &lt;code&gt;pelicanconf.py&lt;/code&gt; 파일에 아래와 같이 적어준다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;THEME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;your_themes_path&amp;gt;/simple-bootstrap&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;make publish 로 배포를 준비할 경우, 이전에 유지되던 디렉터리가 사라져서 난감했다. 이런 경우에는 &lt;code&gt;publishconf.py&lt;/code&gt; 파일에 아래와 같이 추가해주자.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;DELETE_OUTPUT_DIRECTORY …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;pelican 3.7.1을 설치했다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install pelican markdown
pelican-quickstart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;로 설치를 진행한다.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/getpelican/pelican-themes/tree/master/simple-bootstrap"&gt;simple-bootstrap&lt;/a&gt; 테마를 적용했다.&lt;/p&gt;
&lt;p&gt;원하는 경로에 테마를 받은 후에 &lt;code&gt;pelicanconf.py&lt;/code&gt; 파일에 아래와 같이 적어준다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;THEME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;your_themes_path&amp;gt;/simple-bootstrap&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;make publish 로 배포를 준비할 경우, 이전에 유지되던 디렉터리가 사라져서 난감했다. 이런 경우에는 &lt;code&gt;publishconf.py&lt;/code&gt; 파일에 아래와 같이 추가해주자.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;DELETE_OUTPUT_DIRECTORY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="pelican"></category></entry></feed>